<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[公钥加密基本概念（一）]]></title>
    <url>%2F2019%2F04%2F15%2F%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[公钥密码学参考知乎文章《公钥密码学》 ​ 当代密码学的核心是公钥密码学。我们先来聊聊公钥密码学的定义，然后介绍一下它的两大应用，最后简要介绍一下两个公钥密码学的算法。Peter 写本文的目的是梳理清楚学习密码学的大思路，以便在看文档的时候，遇到椭圆曲线，RSA ，加密通信，数字签名这些术语的时候，起码知道它们的大致归属. 定义先来聊公钥密码学的定义。公钥密码学也称为非对称密码学，基本的意思就是在加密和解密的时候使用不同的秘钥，也就是 key ，其中一个是公钥，是可以公开出去的，另外一个是私钥，要严格保密。 但是公钥密码学的应用其实不局限于加密。公钥密码学要实现的功能有两个：一个是保密，发送者需要是用接收者的公钥去加密信息，接收者就用自己的私钥去解密信息。另外一个功能就是认证，发出信息的人用私钥去进行数字签名来签署信息，这样任何人拿到公钥之后都可以去确认信息是不是由私钥持有人发出的。所以，公钥密码学有两个应用，一个是加密通信，另外一个是数字签名。 公钥密码学的安全源于基本的数学原理。公钥和私钥首先应该是有数学联系的，不然所谓的解密和签名操作也就不可能实现了，但是同时不能由公钥去算出私钥，如果可以算出来，那么安全性就丧失了。所以加密算法都是基于一些目前无解的数学问题，或者叫单向函数，例如整数分解或者离散对数。具体的算法有 RSA 和 ECC 等。什么叫单向函数呢？8616460799 是两个数相乘得到的，给这两个数，可以很容易算出结果，但是如果给出结果，要分解出两个乘数，就是一个数学上还没有解决的问题，叫做”整数分解“问题。换句话说，如果有一天整数分解问题解决了，攻击者就可以把公钥分解，那么私钥就很容易被算出来了，基于整数分解的加密算法也就失效了。 稍微总结一下，公钥密码学的应用方向有两个，一个是加密通信，另外一个是数字签名。公钥密码学之所以可行，底层源于数学原理。 应用接下来，我们聊聊加密通信和数字签名的基本原理。 先说加密通信。Bob 需要先在自己的机器上生成公钥和私钥，然后把自己的公钥发送给 Alice 。这样，Alice 就可以给 Bob 发信息了。Alice 会用 Bob 的公钥把信息加密得到密文，密文传输过程中如果被截获是不用担心的，因为只有 Bob ，或者说只有私钥才能解密密文。这就是加密通信的基本过程。使用一个形象的比喻，Alice 要给 Bob 写信，首先需要知道 Bob 家的地址，而公钥就是地址。Alice 的信送到 Bob 的邮箱里之后，只有 Bob 用自己的邮箱钥匙，才能拿到信，所以私钥就是邮箱钥匙。 再说数字签名。Alice 要在网上签署一份合同，所以她就用私钥去签署合同，这样能生成一段数据，这个数据就是数字签名了。然后 Alice 把公钥公布给所有人，这样任何人都可以用公钥去解密数字签名，解密成功，也就证明了这份合同的确是 Alice 签署的。同时，如果有人篡改了这份合同，那么解密过程也会失败，所以说数字签名还有防止篡改的功能。要注意，数字签名过程中，合同本身并没有被加密。我们也来做一个形象的比喻。Alice 写一封信给家里人，写好之后，用自己的印章给信封加上蜡封。家人收到信之后，根据蜡封上的图案就能判断信是 Alice 写的，同时蜡封没有损坏，表示信没有被拆开篡改过。数字签名就相当于这个蜡封。 这就是公钥密码学的两大应用了，加密通信和数字签名。 补充公钥密码学还会用于密钥交换领域。目前自己做的还没有涉及到。 主要算法最后我们来聊聊公钥密码学的具体算法的诞生，最知名的算法有两个，一个是 RSA 算法，一个是 ECC 算法。 RSA 算法是开山鼻祖。1970 年，一位英国密码学家预见了“无秘密加密”的可能性，公钥加密思想产生了。公钥加密的比对称加密有明显优势，因为通信之前，双方不用传递密码，只需要传递公钥即可，而公钥不是秘密，被截获也不会影响通信安全。之后几年，人们开发了 RSA 算法，第一次真正实现了这个想法。RSA 算法标志着公钥密码学真正诞生了。RSA 算法的安全性基于整数分解问题，具体来说就是根据大素数相乘的结果，不可能被反向分解的数学原理。RSA 具体的数学推导不是那么复杂，看看对应的文章就能明白。 后来，人们发明了另外一种加密算法叫做 ECC ，也就是椭圆曲线算法。世界上不可解的数学问题并不是只有整数分解一个，ECC 就是基于另外一个问题：离散对数。一个加密算法的安全性取决于，由公钥去运算私钥的难度。毕竟私钥的位数是有限的，所以即使用暴力搜索的方式，也肯定是能够算出来的。而且各种单向函数虽然无解，但是不代表不能缩小求解范围，所以不同的算法其实安全性还是有差别的。而 ECC 用离散对数原理，同样的 Key 长度，安全性比 RSA 更高。比特币就是用 ECC 来生成地址和私钥。这里你可能会有疑问，为何不能把私钥位数尽量弄长一些呢？的确，越长就越安全，但是同时执行效率也低，所以实际使用中还是要保证一种平衡的。 这里我们要记住的是，加密算法很多，但是最重要的就是 RSA 和 ECC 两个，同时加密算法跟哈希算法是两个东西，所以 SHA1 ，MD5 这些哈希算法跟 RSA 和 ECC 根本不是一类，不要弄混淆。 补充哈希函数主要用来形成摘要 总结首先公钥密码学是基于单向函数的数学原理开发出来的，主要有两个应用，一个是加密通信，一个是数字签名。最著名的公钥密码学的算法有两个，一个是 RSA 一个是 ECC 。]]></content>
      <categories>
        <category>公钥密码学</category>
      </categories>
      <tags>
        <tag>公钥密码学</tag>
        <tag>入门概念</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习生]]></title>
    <url>%2F2019%2F04%2F09%2F%E5%AE%9E%E4%B9%A0%E7%94%9F%2F</url>
    <content type="text"><![CDATA[​ 最近一直都没有更新，一方面杂事太多，一方面心情太差，被一些事情折磨得感觉每分钟都很煎熬。不说这些了，说自己的新身份：实习生。 实习类型​ 这学期课程比较少，而且导师太忙，迟迟不给我们安排课题，自己在实验室向一个无头苍蝇一样，学学这个，再学学那个，始终觉得，这不是适合自己的模式。于是，偷偷找了份实习。 ​ 国内的一些民营大厂一般是没有日常实习的，尤其是我们这个方向（Digital IC），比如业界代表：华为，其只有面对应届生的暑期实习通道，对于我们这些平时相对靠前的人来说，是不开放实习的。讲到这里，还想再提一下前几天去的海思内部交流会。因为是内部，所以相对接触到了很多比较新的数据和信息。在和一个泰山核项目负责人梁老师的交流过程中发现，菊花厂对实习生培养是真的下功夫，一般会分配师傅手把手带，而且内部学习资源之丰富，实在是令人艳羡。明年如果有机会的话，想去体验一把。 ​ 在实习僧上投递的，投了两家，一个是华为，当然这个肯定是不合格，因为不是2020届；第二个就是现在这个，国有大厂兆芯，因为申的岗位过期了，所以安排到了数字后端部门。想了想也觉得无所谓，全流程，接触哪个环节都有必要，没必要从一开始就把自己限制的过于狭隘。 实习环境​ 兆芯主要做自主可控的CPU，以及主板配套芯片。因为是收购的台湾威盛，所以拿到的也是X86架构的授权，目前应该是国内唯一一家。即其CPU可以做出跑Windows的CPU。因为有很多和政府部门的合作，所以保密级别挺高的，其他的自己也就不知道了，毕竟只是一个没有什么权限的小小实习生。 ​ 公司管理很正规，一些内部的资源站，还有员工网站做的都挺好的。所以，这几天自己除了linux shell使用的更溜了以外，还学到了很多别的东西。比如整个office的办公生态，outlook邮件管理，skype等等，还有工作的大概氛围。 ​ 初来乍到，一些具体的讨论还不知道怎样去说，等再过一阵再回来补上吧！ 初步感受​ 我需要做的工作并不难，只要学一下，挺容易上手的。主要负责工作站的维护和一些日常的杂活，做完该做的，剩下的时间基本就可以由自己支配了。所以，这里几乎是不怎么管实习生的……具体的后边再说吧！]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo入坑-图片上传]]></title>
    <url>%2F2019%2F03%2F21%2Fhexo%E5%85%A5%E5%9D%91-%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[​ 这两天对markdown有点着魔，连做学习笔记都在用Typora写markdown了。本来，Typora插入图片是很方便的，可是偏偏自己还又入了hexo的坑。单纯的用Typora写文章的话，无论插入本地图片还是网络图片都是没问题的，如果需要hexo生成html的话，本地图片上传就会出现一些“坑”。下面是来自“坑里”的一线报道。 弃疗方案更改图片目录方法​ 在网上看过一些贴子，说直接把图片放到hexo会查找的目录，然后用绝对路径或者相对路径引用就可以啦。觉得这个方法甚好，毕竟不需要其他的操作。说说自己的尝试吧： hexo根目录/source/_posts/images 对，我就是在本地文章的那个路径，新建了images，失败。然后改到source下，还是失败。而且相对路径、绝对路径都尝试过了，不好使。 hexo根目录/themes/source/images 失败。。。。坑太深了 综上所述，失败。而且我觉得配置文件里应该有图片查找路径啊类似项的，结果没有….. hexo中安装本地图片上传插件​ 第一种简单的方法失败，然后尝试第二种。先说结果吧，成功了。 先安装”hexo-asset-image”这个插件 1npm install hexo-asset-image --save 然后你新建文章的话，就会发现在_posts下有一个和文章名字同名的文件夹，直接把图片放到里边就可以了。然后引用的话直接写 “[图片别名] (图片.jpg)” 这样就可以啦。图片前连路径都不用加。 ​ 结果是，我自己并没有采用这种方案，因为实在太繁琐了！首先我用Typora，你不给图片加路径的话，在编辑器里根本看不到图片，体验实在不好（这个已经有大佬解决了，可以修改插件的代码，把插件对图片路径的修改延后一项，看这里）。其次，每次我都得把图片放进那个目录里，（虽然Typora支持自动复制到指定路径），感觉不喜欢本地有这么多垃圾。 我的方案​ 尝试了上边的几种，最后还是走了“云”的道路。果然，想要体验的话，没有捷径可以走。s 注册七牛云账号，并且实名认证。新建自己的一个资源空间 win下的图片自动上传工具，我用的是qImage，这里是下载以及使用教程。 ​ 不得不说这个图片自动上传工具做的太好了，剪贴板里边的东西，快捷键自动上传。实在是方便。不过作者说的截图长传，目前在我这还过不了。报错是，路径找不到。自己不太理解，明明截完图后，这张图也是在剪贴板里的，却总是上传失败。截图只能是放在一个地方（比如说聊天窗口），再选中图片ctrl+c一遍，才能加快捷键（ctrl+alt+v）上传成功，不然没戏。。。这个坑后续看能不能填上，先把报错放在下面。 总结​ markdown真香，hexo真香。]]></content>
      <categories>
        <category>hexo入坑</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开“更”大吉]]></title>
    <url>%2F2019%2F03%2F19%2F%E5%BC%80%E2%80%9C%E6%9B%B4%E2%80%9D%E5%A4%A7%E5%90%89%2F</url>
    <content type="text"><![CDATA[我的个人博客​ 从今天起，本站就作为本人的个人博客使用啦。 ​ 以前总是会在各种博客上看到对自己很有用的“脱坑指南”，心里对这些大神甚是敬仰，所以自己也是不止一次动过写博客的念头。甚至，自己还开通了微信公众号，尝试着写下自己的生活经历，还有学习以及项目上遇到的一些问题，真是羞愧。。。公众号目前只发出过一篇文章，而且还不是关于项目的，其他都还在素材库里安静地躺着。 缘起​ 虽然很菜吧，但是写博客的心还是一直有的！直到有一天，在学习github使用的时候，接触到了几篇博客，其中一个博主（点我膜拜）做的博客界面实在是太赞了！就是那种一见钟情的感觉，瞬间就被美到了！界面简洁，没有广告，整体显得也很大气，很“高端”。原谅我语文功底太差，遇见这种情形，会用的形容词就这么几个!。然后自己就一发不可收拾了。 情深​ 见了一面，就陷进去了。然后自己大致了解了一下基于Hexo静态博客的大致原理，就吭哧吭哧搞起来了，几乎整整两天时间。虽然后续还有不少要维护和美化的，但搞到现在这种程度，着实难为一个底层“硅农”了！曾经自己一度还想着：“怎么也要一步到位，将自己的博客做到那种非常高端酷炫大气的境界，然后推出自己的第一篇文章来”。理智还是获胜了，搞成那样的话，估计我又得扔进去几天。干脆先扔上来一个瞎bb的文章，来给自己的站点开个光。 ​ Hexo是一个静态博客（网页）的生成工具，然后其搭配github或者codinghub的话，就可以实现将自己的静态博客托管到上边，而不需要定期维护，或者交付费用，接收广告啥的。关键是界面漂亮！Hexo在github上用户很广，所以有很多主题可以去选择，不过我最喜欢的还是这个Next的简洁版本了，干干净净的，很舒服。有一点需要吐槽的就是，主题做定制的时候，用户接口竟然是直接去修改代码！！让一个没有做过前端开发的人实在头疼，还好有各种教程贴的神助攻。 ​ 下面总结一下博客搭建以及定制美化的过程。（好多坑） 安装Git，安装Node.js，安装hexo 参考这个 坑1：Node.js最好选择默认安装路径，不然会有环境变量的问题，导致npm这个包管理工具在git_bash中找不到命令，后续所有步骤都会受影响。 建个人仓，关联github 坑2：有个ssh公钥的问题。这个需要在github个人仓里的setting添加，而且后续在本地端git_bash中连接调试的时候，如果报错，是因为少生成了一个文件。这时候在命令行里人家问(Yes/No)?一定要记得敲Yes，会把这个缺失的文件补上，后续的连接和文章部署才不会出问题。 hexo基本配置，主题更换以及定制和美化 坑max：这是最耗费时间的地方，尤其是对于前端白痴加强迫症的我来说。坑太多，所以就不一一总结了。反正让我吃惊的是，细节到，菜单栏的每一项，网站的每一个功能，比如：站点访问人数统计，文章访问统计，评论功能开通，还有其他美化的地方，竟然都需要深入到底层去改css代码。真是刺激…… Markdown文件编辑器Typora 坑4：hexo文章发布的都是.md格式的文件，自己这两天学了一下，感觉这种写作方式真是不错，不用鼠标点来点去了，直接上手敲。结合这款Typora工具，体验还不错。但是！！就在写这个有序列表的时候，我发现自己出不去了，不能进入下一个无格式的段落了。真是醉了，打开源代码窗口，把之前的段落标记符，复制到下一段的段首就可以退出列表了。或者直接点下一行应该也可以。 ​ 折腾了将近两天，发现一总结就上面三段，真是羞愧。关键是，自己没有中间过程留图的习惯，所以内容感觉“有点湿”。反正主要看的人还是自己吧。。。。 定终身​ 既然说了这是给未来自己的一份礼物，所以基本就不会停更了。陆续会把自己的个人总结还有项目经历放上来，学习笔记也会放一些。关键是用markdown格式写学习笔记真的是太舒服了！！ ​ 除了更新博客外，主题界面还会再做一些小修改。比如背景图片轮播、代码段格式、以及文章格式优化。其他的花里胡哨的，特效一类的，不折腾，拉低自己的level。哈哈. ​ 还有hexo本地的一些配置，github上这个仓分支的建立，以实现多台电脑维护个人博客。后续都搞起来。 总结​ 希望这个小网站能成为自己的一个小助力，但愿自己能在不务正业成为大神的道路上越走越远！]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
</search>
